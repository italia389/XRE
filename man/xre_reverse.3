.ad l
.TH XRE_REVERSE 3 2020-03-14 "Ver. 1.0.0" "XRE Library Documentation"
.nh \" Turn off hyphenation.
.SH NAME
\fBxregrev\fR, \fBxregnrev\fR, \fBxregwrev\fR,
\fBxregwnrev\fR - extended regular expression (XRE) pattern-reversal routines
.SH SYNOPSIS
\fB#include "xre.h"\fR
.HP 2
\fBint xregrev(char *\fIrevpat\fB, const char *\fIpat\fB, int \fIcflags\fB);\fR
.HP 2
\fBint xregnrev(char *\fIrevpat\fB, const char *\fIpat\fB, size_t \fIlen\fB, int \fIcflags\fB);\fR
.HP 2
\fBint xregwrev(wchar_t *\fIrevpat\fB, const wchar_t *\fIpat\fB, int \fIcflags\fB);\fR
.HP 2
\fBint xregwnrev(wchar_t *\fIrevpat\fB, const wchar_t *\fIpat\fB, size_t \fIlen\fB, int \fIcflags\fB);\fR
.SH DESCRIPTION
These routines are an extension of the XRE library and are used when backward matching is desired.  Backward matching is
accomplished by reversing an extended regular expression (ERE) with one of these routines, compiling the reversed pattern with
the REG_REVERSED flag, then matching the compiled ERE against a reversed string (or reversed character stream, if
\fBxreguexec\fR() is used).

The \fBxregrev\fR() function reverses the ERE string pattern pointed to
by \fIpat\fR, subject to the REG_ENHANCED flag in \fIcflags\fR, and stores the result in \fIrevpat\fR.  The buffer pointed to by
\fIrevpat\fR is assumed to be at least the length of \fIpat\fR, including the terminating null.  If the REG_ENHANCED flag is set
in \fIcflags\fR, the pattern is assumed to be an Enhanced ERE; otherwise, a POSIX ERE (see xre_format(7)).  If \fBxregrev\fR()
is successful, it returns zero; otherwise, it returns non-zero indicating an error; see \fBDIAGNOSTICS\fR in xre_core(3).
.PP
The \fBxregnrev\fR() routine reverses patterns like \fBxregrev\fR(), but the length of the regular expression string is
specified, allowing a string that is not null terminated and/or contains null characters.
.PP
The \fBxregwrev\fR() variant takes a wide-character (\fIwchar_t\fR) string for the regular expression, and the
\fBxregwnrev\fR() variant accepts a wide character string length argument, and so allows wide character strings that are not
null terminated and/or contains null characters.
.PP
The converted ERE in \fIrevpat\fR can subsequently be compiled by \fBxregcomp\fR() with the REG_REVERSED flag and used for
backward matching as long as it does not contain back references or position-dependent options.  For example, patterns
"a(b\\l)\\1" and "a(?i)bc" cannot be reversed; however, "a(?i:bc)" is legal.  As mentioned previously,
when a matching function like
\fBxregexec\fR() is used with the compiled pattern, the \fIstring\fR argument must be reversed (for example, "abc" must be given
to the function as "cba") in order for backward matching to work properly.  Or if \fBxreguexec\fR() is used, the string
characters must be supplied in reverse order; that is, beginning at the last character and ending at the first character.  See
the program included in the XRE distribution for examples.
.SH SEE ALSO
xre(3), xre_approx(3), xre_core(3), xre_format(7), xre_info(3)
